{
  "name": "Data Processing Pipeline",
  "version": 1,
  "workflow": {
    "id": "data-pipeline-002",
    "name": "Data Processing Pipeline",
    "description": "Automated data processing pipeline that fetches, transforms, and stores data from multiple sources",
    "active": true,
    "tags": ["data", "etl", "automation", "pipeline"],
    "settings": {
      "executionOrder": "v1"
    },
    "triggerCount": 1,
    "createdAt": "2025-08-06T03:30:00.000Z",
    "updatedAt": "2025-08-06T04:00:00.000Z"
  },
  "nodes": [
    {
      "id": "schedule-trigger",
      "name": "Daily Schedule",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [200, 300],
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 2 * * *"
            }
          ]
        }
      }
    },
    {
      "id": "fetch-api-data",
      "name": "Fetch API Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [400, 200],
      "parameters": {
        "method": "GET",
        "url": "https://api.example.com/data",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBasicAuth",
        "options": {
          "timeout": 30000
        }
      }
    },
    {
      "id": "fetch-database-data",
      "name": "Fetch Database Data",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [400, 400],
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM sales_data WHERE date >= CURRENT_DATE - INTERVAL '1 day'"
      }
    },
    {
      "id": "merge-data",
      "name": "Merge Data Sources",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [600, 300],
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "id",
              "field2": "external_id"
            }
          ]
        }
      }
    },
    {
      "id": "transform-data",
      "name": "Transform Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [800, 300],
      "parameters": {
        "functionCode": "const items = $input.all();\n\nconst transformedItems = items.map(item => {\n  const data = item.json;\n  \n  return {\n    json: {\n      id: data.id,\n      name: data.name?.trim()?.toLowerCase(),\n      value: parseFloat(data.value) || 0,\n      category: data.category || 'uncategorized',\n      processed_at: new Date().toISOString(),\n      source: data.source || 'unknown',\n      metadata: {\n        original_value: data.value,\n        processing_version: '1.0'\n      }\n    }\n  };\n});\n\nreturn transformedItems;"
      }
    },
    {
      "id": "validate-data",
      "name": "Validate Data",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1000, 300],
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.name }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            },
            {
              "leftValue": "={{ $json.value }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "larger"
              }
            }
          ],
          "combineOperation": "all"
        }
      }
    },
    {
      "id": "store-valid-data",
      "name": "Store Valid Data",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1200, 200],
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "processed_data",
        "columns": "id, name, value, category, processed_at, source, metadata",
        "returnFields": "*"
      }
    },
    {
      "id": "log-invalid-data",
      "name": "Log Invalid Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1200, 400],
      "parameters": {
        "functionCode": "console.log('Invalid data found:', $json);\n\nreturn {\n  json: {\n    type: 'validation_error',\n    data: $json,\n    timestamp: new Date().toISOString(),\n    message: 'Data failed validation checks'\n  }\n};"
      }
    },
    {
      "id": "send-summary",
      "name": "Send Summary Report",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [1400, 300],
      "parameters": {
        "fromEmail": "automation@company.com",
        "toEmail": "admin@company.com",
        "subject": "Daily Data Processing Summary - {{ $now.format('yyyy-MM-dd') }}",
        "message": "Data processing completed.\n\nProcessed: {{ $runIndex }} records\nTimestamp: {{ $now.format('yyyy-MM-dd HH:mm:ss') }}\n\nBest regards,\nAutomation System"
      }
    }
  ],
  "connections": {
    "Daily Schedule": {
      "main": [
        [
          {
            "node": "Fetch API Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Database Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch API Data": {
      "main": [
        [
          {
            "node": "Merge Data Sources",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Database Data": {
      "main": [
        [
          {
            "node": "Merge Data Sources",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Data Sources": {
      "main": [
        [
          {
            "node": "Transform Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform Data": {
      "main": [
        [
          {
            "node": "Validate Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Data": {
      "main": [
        [
          {
            "node": "Store Valid Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Invalid Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Valid Data": {
      "main": [
        [
          {
            "node": "Send Summary Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "staticData": null
}